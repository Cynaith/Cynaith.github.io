<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis算法-scan</title>
      <link href="/2020/05/02/Redis%E7%AE%97%E6%B3%95-scan/"/>
      <url>/2020/05/02/Redis%E7%AE%97%E6%B3%95-scan/</url>
      
        <content type="html"><![CDATA[<ul><li>Redis算法</li><li>数据快速查询算法</li><li>scan</li></ul><h3 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h3><hr><ul><li><p>如何从海量的key中找出满足特定前缀的key列表?</p><ul><li><code>keys *</code> : 获取全部key</li><li><code>keys sth*</code> : 获取前缀为sth的key</li><li><code>keys sth*sth</code> : 获取前缀和后缀为sth的key</li><li>缺点:<br><br>1. 没有offset、limit参数<br><br>2. 复杂度为O(n)</li></ul></li><li><p>scan的特点</p><ul><li>复杂度虽然也是O(n),但它是通过游标分步进行的,不会堵塞线程。</li><li>提供limit参数,可以控制每次返回结果的最大条数</li><li>同keys一样,它也提供模式匹配功能。</li><li>服务器不需要为游标保存状态,游标唯一状态就是scan返回给客户端的游标整数。</li><li><font color= #ff4911>返回的数据可能会有重复,需要客户端去重</font></li><li>遍历过程中如果有数据修改,改动后的数据能不能遍历是不确定的。</li><li>单次返回的结果是空的并不意味着遍历结束,而要看返回的游标值是否为零。</li></ul></li></ul><hr><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><ul><li>scan提供三个参数<ul><li><strong>cursor:</strong> 游标位置,第一次遍历时cursor为0,然后将返回的游标作为下一次遍历的cursor,一直到返回的cursor为0</li><li><strong>key正则表模式</strong></li><li><strong>遍历的limit hint:</strong> 一次遍历多少次</li></ul></li><li>Demo  <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scan 0 match key999* count 3000</span><br><span class="line"></span><br><span class="line">1) "1746"</span><br><span class="line">2) 1) "key9996"</span><br><span class="line">     2) "key999"</span><br><span class="line">     3) "key9990"</span><br><span class="line">127.0.0.1:6379&gt; scan 1746 match key999* count 3000</span><br><span class="line"></span><br><span class="line">1) "9753"</span><br><span class="line">2) 1) "key9997"</span><br><span class="line">     2) "key9999"</span><br><span class="line">     3) "key9991"</span><br><span class="line">127.0.0.1:6379&gt; scan 9753 match key999* count 3000</span><br><span class="line"></span><br><span class="line">1) "5223"</span><br><span class="line">2) 1) "key9995"</span><br><span class="line">     2) "key9998"</span><br><span class="line">     3) "key9994"</span><br><span class="line">     4) "key9992"</span><br><span class="line">127.0.0.1:6379&gt; scan 5223 match key999* count 3000</span><br><span class="line"></span><br><span class="line">1) "0"</span><br><span class="line">2) 1) "key9993"</span><br></pre></td></tr></table></figure></li><li>更多scan命令<ul><li><code>zscan</code>遍历zset集合元素</li><li><code>hscan</code>遍历hash字典元素</li><li><code>sscan</code>遍历set集合元素</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis算法-GeoHash</title>
      <link href="/2020/05/02/Redis%E7%AE%97%E6%B3%95-GeoHash/"/>
      <url>/2020/05/02/Redis%E7%AE%97%E6%B3%95-GeoHash/</url>
      
        <content type="html"><![CDATA[<h3 id="GeoHash"><a href="#GeoHash" class="headerlink" title="GeoHash"></a>GeoHash</h3><hr><ul><li>什么是GeoHash算法?<ul><li>通用的地理位置距离排序算法</li></ul></li><li>原理<ul><li>GeoHash算法将二维的经纬度数据映射到一维的整数,这样所有的元素都将挂载到一条线上,距离靠近的二维坐标映射到一维后的点之间距离也会很接近。</li></ul></li></ul><hr><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><ul><li>增加<ul><li>geoadd指令携带集合名称以及<font color=#ff4911>多个</font>经纬度名称三元组</li><li>Demo  <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">        127.0.0.1:6379 &gt; geoadd company 116.48105 39.996794 juejin</span><br><span class="line">        </span><br><span class="line">        (integer) 1</span><br><span class="line">        </span><br><span class="line">        127.0.0.1:6379 &gt; geoadd company 116.514203 39.905409 ireader</span><br><span class="line">        </span><br><span class="line">        (integer) 1</span><br><span class="line">        </span><br><span class="line">        127.0.0.1:6379 &gt; geoadd company 116.489033 40.007669 meituan</span><br><span class="line">        </span><br><span class="line">        (integer) 1</span><br><span class="line">        </span><br><span class="line">        127.0.0.1:6379 &gt; geoadd company 116.562108 39.787602 jd 116.334255 40.027400 xiaomi</span><br><span class="line">        </span><br><span class="line">        (integer) 2</span><br><span class="line">        ```  </span><br><span class="line">* 距离</span><br><span class="line">    * geolist指令可以用来计算两个元素之间的距离,携带集合名称、两个名称和距离单位  </span><br><span class="line">    * Demo</span><br><span class="line">        ```shell script</span><br><span class="line">        127.0.0.1:6379 &gt; geodist company juejin ireader km</span><br><span class="line">        </span><br><span class="line">        "10.5501"</span><br><span class="line">        </span><br><span class="line">        127.0.0.1:6379&gt; geodist company juejin meituan km</span><br><span class="line">        </span><br><span class="line">        "1.3878"</span><br><span class="line">        </span><br><span class="line">        127.0.0.1:6379&gt; geodist company juejin jd km</span><br><span class="line">        </span><br><span class="line">        "24.2739"</span><br><span class="line">        </span><br><span class="line">        127.0.0.1:6379&gt; geodist company juejin juejin km</span><br><span class="line">        </span><br><span class="line">        "0.0000"</span><br><span class="line">        ``` </span><br><span class="line">* 获取元素位置</span><br><span class="line">    * geopos指令可以获取集合中任意元素的经纬度坐标,可以一次获取多个。</span><br><span class="line">    * Demo</span><br><span class="line">        ```shell script</span><br><span class="line">        127.0.0.1:6379 &gt; geopos company juejin</span><br><span class="line"></span><br><span class="line">        1) 1) "116.48104995489120483"</span><br><span class="line">             2) "39.99679348858259686"</span><br><span class="line">           </span><br><span class="line">        127.0.0.1:6379 &gt; geopos company ireader</span><br><span class="line">        </span><br><span class="line">        1) 1) "116.5142020583152771"</span><br><span class="line">             2) "39.90540918662494363"</span><br><span class="line">             </span><br><span class="line">        127.0.0.1:6379 &gt; geopos company meituan xiaomi</span><br><span class="line">        </span><br><span class="line">        1) 1) "116.48903220891952515"</span><br><span class="line">             2) "40.00766997707732031"</span><br><span class="line">        2) 1) "116.33425265550613403"</span><br><span class="line">             2) "40.02740024658161389"</span><br><span class="line">        ```      </span><br><span class="line">* 获取元素hash值</span><br><span class="line">    * GeoHash可以获取元素的经纬度编码字符串,上面已经提到,他是base32编码。</span><br><span class="line">    你可以使用这个编码值去[http://geohash.org/$&#123;hash&#125;](http://geohash.org)上进行定位     </span><br><span class="line">    * Demo </span><br><span class="line">        ```shell script</span><br><span class="line">            127.0.0.1:6379&gt; geohash company ireader</span><br><span class="line">      </span><br><span class="line">            1) "wx4g52e1ce0"</span><br></pre></td></tr></table></figure>  <a href="http://geohash.org/wx4g52e1ce0" target="_blank" rel="noopener">http://geohash.org/wx4g52e1ce0</a></li></ul></li><li>附近的member<ul><li><code>georadiusbymember</code>指令是最为关键的指令之一,它可以用来查询指定元素附近的其他元素。</li><li>Demo  <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; georadiusbymember company ireader 20 km count 3 asc</span><br><span class="line"></span><br><span class="line">1) "ireader"</span><br><span class="line">2) "juejin"</span><br><span class="line">3) "meituan"</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379 &gt; georadiusbymember company ireader 20 km count 3 desc</span><br><span class="line"></span><br><span class="line">1) "jd"</span><br><span class="line">2) "meituan"</span><br><span class="line">3) "juejin"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">三个可选参数 withcoord、withdist、withhash用来携带附加参数</span></span><br><span class="line">127.0.0.1:6379 &gt; georadiusbymember company ireader 20 km withcoord withdist withhash count 3 asc</span><br><span class="line"></span><br><span class="line">1) 1) "ireader"</span><br><span class="line">     2) "0.0000"</span><br><span class="line">     3) (integer) 4069886008361398</span><br><span class="line">     4) 1) "116.5142020583152771"</span><br><span class="line">          2) "39.90540918662494363"</span><br><span class="line">2) 1) "juejin"</span><br><span class="line">     2) "10.5501"</span><br><span class="line">     3) (integer) 4069887154388167</span><br><span class="line">     4) 1) "116.48104995489120483"</span><br><span class="line">          2) "39.99679348858259686"</span><br><span class="line">3) 1) "meituan"</span><br><span class="line">     2) "11.5748"</span><br><span class="line">     3) (integer) 4069887179083478</span><br><span class="line">     4) 1) "116.48903220891952515"</span><br><span class="line">          2) "40.00766997707732031"</span><br></pre></td></tr></table></figure><ul><li>除了georadiusbymember,Redis还提供了根据坐标查询附近元素的指令<code>georadius</code></li><li>Demo  <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadius company 116.514 39.905 20 km count 3 desc</span><br><span class="line"></span><br><span class="line">1) "jd"</span><br><span class="line">2) "meituan"</span><br><span class="line">3) "juejin"</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h5 id="注"><a href="#注" class="headerlink" title="注"></a>注</h5><ul><li>GeoHash只是一个普通的SortedSet,使用<code>zrem</code>指令可删除元素</li><li>建议Geo数据使用单独的实例部署,不使用集群环境</li><li>数据量过大应拆分Geo数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis算法 </tag>
            
            <tag> 坐标定位算法 </tag>
            
            <tag> GeoHash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据结构-布隆过滤器</title>
      <link href="/2020/05/02/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/05/02/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><hr><h5 id="什么是缓存穿透"><a href="#什么是缓存穿透" class="headerlink" title="什么是缓存穿透"></a>什么是缓存穿透</h5><ul><li>黑客不断请求缓存和数据库中不存在的数据</li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>当通过某一个key查数据时,如果对应的数据库和缓存中都不存在,则在缓存中设置此key为null,并设定一个失效时间。</li></ul><ul><li>布隆过滤器<ul><li><strong>理解:</strong> 长度为n的二进制向量,通过一系列随机映射函数(eg：多个Hash)将数据映射进布隆过滤器中。<br></li><li><strong>优点:</strong> 存放的不是完整的数据,占用内存很少。新增、查询速度够快。<br></li><li><strong>缺点:</strong> 随着数据量的增大,误判率会随之增加,只能判断数据一定不存在,不能判断数据一定存在。</li><li><strong>guava实现布隆过滤器:</strong> <br><br><br>  导入guava依赖  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>   测试Demo:   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> size = <span class="number">1000000</span>;<span class="comment">//预计要插入多少数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> fpp = <span class="number">0.01</span>;<span class="comment">//期望的误判率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        bloomFilter.put(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1000000</span>; i &lt; <span class="number">2000000</span>; i++) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//mightContain(i)判断i是否在布隆过滤器中</span></span><br><span class="line">        <span class="keyword">if</span> (bloomFilter.mightContain(i)) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(i + <span class="string">"误判了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"总共的误判数:"</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><ul><li>爬虫系统的URL去重</li><li>Hbase、Cassandra、LevelDB、RocksDB内部都有布隆结构</li><li>邮箱系统的垃圾邮件过滤</li></ul><hr><p> refer to <a href="https://www.cnblogs.com/zhanggguoqi/p/10571225.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhanggguoqi/p/10571225.html</a><br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.cnblogs.com/CodeBear/p/10911177.html" target="_blank" rel="noopener">https://www.cnblogs.com/CodeBear/p/10911177.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis数据结构 </tag>
            
            <tag> 布隆过滤器 </tag>
            
            <tag> 缓存穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据结构-HyperLogLog</title>
      <link href="/2020/05/02/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-HyperLogLog/"/>
      <url>/2020/05/02/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-HyperLogLog/</url>
      
        <content type="html"><![CDATA[<h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><hr><ul><li>什么时候需要用到HyperLogLog?<ul><li>统计UV(去重不精确的计数业务)</li></ul></li></ul><hr><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><ul><li>HyperLogLog提供了两个指令<code>pfadd</code>(增加计数)、<code>pfcount</code>(获取计数)。<br>(pf是HyperLogLog数据结构的发明人Philippe Flajolet)<ul><li>Demo  <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; pfadd codehole user1</span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379 &gt; pfadd codehole user2</span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379 &gt; pfcount codehole</span><br><span class="line"></span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>pfmerge:</strong> 用于将多个pf计数值累加在一起形成一个新的pf值</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis数据结构 </tag>
            
            <tag> HyperLogLog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据结构-跳跃链表</title>
      <link href="/2020/05/02/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E8%B7%B3%E8%B7%83%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/05/02/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E8%B7%B3%E8%B7%83%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Java操作有序集合SortedSet"><a href="#Java操作有序集合SortedSet" class="headerlink" title="Java操作有序集合SortedSet"></a>Java操作有序集合SortedSet</h2><ul><li><strong>插入score和member到有序集合key中:</strong> <code>jedis.zadd(&quot;class1&quot;, 123, &quot;xiaoming&quot;);</code></li><li><strong>返回有序集合key的基数:</strong> <code>jedis.zcard(&quot;class1&quot;);</code></li><li><strong>返回有序集合中score值在min和max之间的成员的数量:</strong> <code>jedis.zcount(&quot;class1&quot;, 124, 125);</code></li><li><strong>返回有序集合中score值在min和max之间的成员的member:</strong> <code>jedis.zrevrangeByScore(&quot;class1&quot;, 130, 120);</code></li><li><strong>返回指定区间内的成员(score小-&gt;大):</strong> <code>//区间为负为倒序&lt;br&gt;jedis.zrange(&quot;class1&quot;, 0, -1);</code></li><li><strong>返回指定区间内的成员(score大-&gt;小):</strong> <code>jedis.zrevrange(&quot;class1&quot;, 0, -1);</code></li><li><strong>使member的score增加increment:</strong> <code>jedis.zincrby(&quot;class1&quot;, 12, &quot;xiaoming&quot;);</code></li><li><strong>查看member的score:</strong> <code>jedis.zscore(&quot;class1&quot;, &quot;xiaoming&quot;);</code></li><li><strong>查看有序集合中member的排名(小-&gt;大):</strong> <code>jedis.zrank(&quot;class1&quot;, &quot;sad&quot;);</code></li><li><strong>移除有序集合中的一个或多个成员,不存在将忽略:</strong> <code>jedis.zrem(&quot;class1&quot;,&quot;xiaoming&quot;,&quot;sad&quot;,&quot;xiaowang&quot;)；</code></li></ul><hr><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>排行榜应用，取TOP N操作</li><li>延时任务</li><li>范围查找</li></ul><hr><h4 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h4><ul><li>“跳跃列表”<ul><li>如图<br><br><img src="./img/skiplist.jpg" alt="skiplist.jpg">  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">跳跃表在redis中主要是有序表的一种底层实现。对于普通链表的查找，即使有序，我们也不能使用二分法，需要从头开始，一个一个找，时间复杂度为O(n)。</span><br><span class="line">而对于跳跃表，从名字可以看出跳跃表的优势就在于可以跳跃。如何做到呢？</span><br><span class="line">在于其特殊的层设计。比如我们查找46，普通链表只能从头开始查找，比对-3,2,17...直到46，要比对7次。</span><br><span class="line">但是对于跳跃表，我们可以从最高层开始查找：</span><br><span class="line">    </span><br><span class="line">第一步：在L4层直接与55比对，发现大了，退回到第3层</span><br><span class="line">    </span><br><span class="line">第二步：在L3层与21比对，发现小了，继续往前比对55，发现大了，退回到第二层</span><br><span class="line"></span><br><span class="line">第三步：在L2层与37比对，发现小了，往前，与55比对，发现大了，退回到第一层</span><br><span class="line"></span><br><span class="line">第四步：在第1层，与46比对，查找成功。</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「OliverAAAAAA」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;OliverAAAAAA&#x2F;article&#x2F;details&#x2F;89184018</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis数据结构 </tag>
            
            <tag> 跳跃链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据结构-快速链表</title>
      <link href="/2020/05/02/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%BF%AB%E9%80%9F%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/05/02/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%BF%AB%E9%80%9F%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-操作列表类型-类似于LinkedList"><a href="#Java-操作列表类型-类似于LinkedList" class="headerlink" title="Java 操作列表类型(类似于LinkedList)"></a>Java 操作列表类型(类似于LinkedList)</h2><ul><li><strong>在列表头部添加数据:</strong> <code>jedis.lpush(&quot;list&quot;, &quot;xiaoming&quot;,&quot;age&quot;,&quot;20&quot;,&quot;address&quot;,&quot;beijing&quot;);</code></li><li><strong>在列表尾部添加数据:</strong> <code>jedis.rpush(&quot;height&quot;,&quot;170cm&quot;,&quot;hobby&quot;,&quot;dance&quot;);</code></li><li><strong>列表长度:</strong> <code>jedis.llen(&quot;list&quot;)</code></li><li><strong>列表list下标为2的元素:</strong> <code>jedis.lindex(&quot;list&quot;,2);</code></li><li><strong>移除一个元素:</strong> <code>jedis.lrem(&quot;list&quot;,1,&quot;age&quot;)</code></li><li><strong>将列表key下标为index的元素值设置为value:</strong> <code>jedis.lset(&quot;list&quot;,5,&quot;hello world&quot;);</code></li><li><strong>移除并返回list尾元素:</strong> <code>jedis.rpop(&quot;list&quot;);</code></li><li>取值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = jedis.lrange(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(String str:list)&#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>简单的消息队列</li><li>利用lrange命令，做基于redis的分页功能</li></ul><hr><h4 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h4><ul><li>Redis底层存储是”快速链表(quickList)”结构<ul><li>在<font color=#FF2941>列表元素较少</font>的情况下,会使用一块连续的内存存储,这个结构是ziplist(压缩列表)。</li><li><font color=#FF2941>数据量多</font>时改为quicklist。</li><li>Redis将链表和ziplist结合起来组成了quicklist,将多个ziplist使用双向指针串起来使用</li><li>使用List作为异步消息队列<ul><li><strong>问题1:</strong> 队列空了怎么办?<br><br>&emsp;&emsp;&emsp;&nbsp;<br>当队列为空时,客户端就会陷入空轮询的pop-&gt;无数据-&gt;pop的死循环中。<br>所以采用堵塞读方法  <code>blpop</code>和<code>brpop</code><br>堵塞读在队列没有数据时,会立即进入休眠状态,一旦数据到来,则立刻醒过来。消息延迟几乎为0</li><li><strong>问题2:</strong> 空闲链接自动断开<br><br>&emsp;&emsp;&emsp;&nbsp;<br>如果线程一直堵塞在那里,Redis的客户端就成了闲置连接,闲置过久,服务器一般会主动断开,减少闲置资源占用。<br>这时blpop/brpop会抛出异常。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis数据结构 </tag>
            
            <tag> 快速链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis扩展类型-位图</title>
      <link href="/2020/05/02/Redis%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B-%E4%BD%8D%E5%9B%BE/"/>
      <url>/2020/05/02/Redis%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B-%E4%BD%8D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h3><hr><ul><li>什么时候需要用到位图?<ul><li>平时开发中有一些bool型数据需要存储,比如用户一年的签到记录。为了解决存储空间,Redis提供了位图数据结构,这样365天就是365位,46个字节。</li></ul></li><li>位图是什么?<ul><li>其实就是普通的字符串,也就是byte数组。</li></ul></li><li>怎么使用位图?<ul><li>可以使用普通的get/set直接获取和设置整个位图的内容,也可以使用位图操作getbit/setbit等将byte数组看成”位数组”来处理。</li></ul></li></ul><hr><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><ul><li><p>Redis的位数组是自动扩展的,如果设置了某个偏移位置超出了现有的内容范围,就会自动将位数组进行零扩充。</p></li><li><p>零存整取</p><ul><li>h的ASCII码:0b1101000<br>e的ASCII码:0b1100101  <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit s 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit s 2 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit s 4 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit s 9 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit s 10 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit s 13 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit s 15 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get s</span><br><span class="line">"he"</span><br></pre></td></tr></table></figure></li></ul></li><li><p>整存零取</p><ul><li>h的ASCII码:0b1101000  <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set w h</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit w 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit w 2</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果对应位的字节是不可打印字符,redis-cli会显示该字符的十六进制形式</p></li><li><p>Redis提供了位图统计指令bitcount和位图查找指令bitpos</p><ul><li><strong>bitcount:</strong> 用来统计指定位置范围内的1的个数。<ul><li>统计用户一共签到多少天</li></ul></li><li><strong>bitpos:</strong> 用来查找指定范围内出现的第一个0或1。  <ul><li>查找用户从哪一天开始第一次签到。 </li></ul></li><li>如果指定范围参数[start,end],就可以统计在某个时间范围内用户签到了多少天，用户自某天以后哪天开始签到</li><li>但start和end是字节索引,所以指定的位范围必须是<font color=#ff4911>8的倍数</font></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis基本类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本类型-有序集合</title>
      <link href="/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88/"/>
      <url>/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="Java操作有序集合SortedSet"><a href="#Java操作有序集合SortedSet" class="headerlink" title="Java操作有序集合SortedSet"></a>Java操作有序集合SortedSet</h2><ul><li><strong>插入score和member到有序集合key中:</strong> <code>jedis.zadd(&quot;class1&quot;, 123, &quot;xiaoming&quot;);</code></li><li><strong>返回有序集合key的基数:</strong> <code>jedis.zcard(&quot;class1&quot;);</code></li><li><strong>返回有序集合中score值在min和max之间的成员的数量:</strong> <code>jedis.zcount(&quot;class1&quot;, 124, 125);</code></li><li><strong>返回有序集合中score值在min和max之间的成员的member:</strong> <code>jedis.zrevrangeByScore(&quot;class1&quot;, 130, 120);</code></li><li><strong>返回指定区间内的成员(score小-&gt;大):</strong> <code>//区间为负为倒序&lt;br&gt;jedis.zrange(&quot;class1&quot;, 0, -1);</code></li><li><strong>返回指定区间内的成员(score大-&gt;小):</strong> <code>jedis.zrevrange(&quot;class1&quot;, 0, -1);</code></li><li><strong>使member的score增加increment:</strong> <code>jedis.zincrby(&quot;class1&quot;, 12, &quot;xiaoming&quot;);</code></li><li><strong>查看member的score:</strong> <code>jedis.zscore(&quot;class1&quot;, &quot;xiaoming&quot;);</code></li><li><strong>查看有序集合中member的排名(小-&gt;大):</strong> <code>jedis.zrank(&quot;class1&quot;, &quot;sad&quot;);</code></li><li><strong>移除有序集合中的一个或多个成员,不存在将忽略:</strong> <code>jedis.zrem(&quot;class1&quot;,&quot;xiaoming&quot;,&quot;sad&quot;,&quot;xiaowang&quot;)；</code></li></ul><hr><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>排行榜应用，取TOP N操作</li><li>延时任务</li><li>范围查找</li></ul><hr><h4 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h4><ul><li>“跳跃列表”<ul><li>如图<br><br><img src="./img/skiplist.jpg" alt="skiplist.jpg">  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">跳跃表在redis中主要是有序表的一种底层实现。对于普通链表的查找，即使有序，我们也不能使用二分法，需要从头开始，一个一个找，时间复杂度为O(n)。</span><br><span class="line">而对于跳跃表，从名字可以看出跳跃表的优势就在于可以跳跃。如何做到呢？</span><br><span class="line">在于其特殊的层设计。比如我们查找46，普通链表只能从头开始查找，比对-3,2,17...直到46，要比对7次。</span><br><span class="line">但是对于跳跃表，我们可以从最高层开始查找：</span><br><span class="line">    </span><br><span class="line">第一步：在L4层直接与55比对，发现大了，退回到第3层</span><br><span class="line">    </span><br><span class="line">第二步：在L3层与21比对，发现小了，继续往前比对55，发现大了，退回到第二层</span><br><span class="line"></span><br><span class="line">第三步：在L2层与37比对，发现小了，往前，与55比对，发现大了，退回到第一层</span><br><span class="line"></span><br><span class="line">第四步：在第1层，与46比对，查找成功。</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「OliverAAAAAA」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;OliverAAAAAA&#x2F;article&#x2F;details&#x2F;89184018</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis基本类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本类型-哈希类型</title>
      <link href="/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%93%88%E5%B8%8C%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%93%88%E5%B8%8C%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Java操作哈希类型"><a href="#Java操作哈希类型" class="headerlink" title="Java操作哈希类型"></a>Java操作哈希类型</h2><ul><li><strong>将fiele:value插入Hash表key中:</strong> <code>jedis.hset(&quot;bigcity&quot;,&quot;big&quot;,&quot;beijing&quot;);</code></li><li><strong>获取Hash表key中域为feild的value:</strong> <code>jedis.hget(&quot;bigcity&quot;,&quot;big&quot;);</code></li><li><strong>插入一个map至Hash表key中:</strong> <code>jedis.hmset(&quot;bigCity2&quot;,map);</code></li><li><strong>通过List接收从Hash表key中返回的多个域:</strong> <code>List&lt;String&gt; list = jedis.hmget(&quot;bigCity2&quot;,&quot;big1&quot;,&quot;big2&quot;);</code></li><li><strong>删除Hash表key中的多个feild:</strong> <code>jedis.hdel(&quot;bigCity2&quot;,&quot;big1&quot;,&quot;big2&quot;);</code></li><li><strong>获取Hash表的长度:</strong> <code>jedis.hlen(&quot;bigcity&quot;);</code></li><li><strong>是否存在Hash表key:</strong> <code>jedis.exists(&quot;bigCity2&quot;);</code></li><li><strong>返回Hash表中所有feilds:</strong> <code>jedis.hkeys(&quot;bigCity2&quot;)</code></li><li><strong>返回Hash表中所有values:</strong> <code>jedis.hvals(&quot;bigCity2&quot;)</code></li></ul><hr><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>操作某个字段</li></ul><hr><h4 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h4><ul><li>rehash<ul><li>Redis为追求高性能,不堵塞服务,所以采用渐进式rehash策略。</li><li><strong>渐进式rehash:</strong> <br>在rehash同时保留两个hash结构,查询时会查询两个hash结构。<br><br>在后续的定时任务以及hash操作指令中,循序渐进地将旧hash的内容一点点地迁移到新的hash结构中。<br><br>当hash移除了最后一个元素之后,该数据结构被自动删除,内存被回收。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis基本类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本类型-集合类型</title>
      <link href="/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="java操作Redis集合类型"><a href="#java操作Redis集合类型" class="headerlink" title="java操作Redis集合类型"></a>java操作Redis集合类型</h2><ul><li><strong>添加集合元素:</strong> <code>jedis.sadd(&quot;city&quot;,&quot;北京&quot;,&quot;广州&quot;,&quot;深圳&quot;,&quot;上海&quot;);</code></li><li><strong>取集合头部元素:</strong> <code>jedis.spop(&quot;city&quot;);</code></li><li><strong>随机取一个值:</strong> <code>jedis.srandmember(&quot;city&quot;);</code></li><li><strong>Srem移除集合中一或多个元素,不存在的元素会被忽略.当key不是集合类型时,返回一个错误:</strong> <code>jedis.screm(&quot;city&quot;,&quot;北京&quot;)</code></li><li><strong>Smember用于返回集合中的所有成员.不存在的集合key视为空集合:</strong> <code>jedis.smember(&quot;city&quot;);</code></li><li><strong>判断元素是否在集合中:</strong> <code>jedis.sismember(&quot;city&quot;,&quot;深圳&quot;;</code></li><li><strong>Scard用于返回集合中元素的数量:</strong> <code>jedis.scard(&quot;city&quot;);</code></li><li><strong>求交集:</strong> <code>jedis.sinter(&quot;city1&quot;,&quot;city2&quot;);</code></li><li><strong>求并集:</strong> <code>jedis.sunion(&quot;city1&quot;,&quot;city2&quot;);</code></li><li><strong>求差集:</strong> <code>jedis.sdiff(&quot;city1&quot;,&quot;city2&quot;);</code></li></ul><hr><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>全局去重</li><li>利用交集、并集、差集等操作,计算共同喜好，全部的喜好，自己独有的喜好等功能.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis基本类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本类型-列表类型</title>
      <link href="/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-操作列表类型-类似于LinkedList"><a href="#Java-操作列表类型-类似于LinkedList" class="headerlink" title="Java 操作列表类型(类似于LinkedList)"></a>Java 操作列表类型(类似于LinkedList)</h2><ul><li><strong>在列表头部添加数据:</strong> <code>jedis.lpush(&quot;list&quot;, &quot;xiaoming&quot;,&quot;age&quot;,&quot;20&quot;,&quot;address&quot;,&quot;beijing&quot;);</code></li><li><strong>在列表尾部添加数据:</strong> <code>jedis.rpush(&quot;height&quot;,&quot;170cm&quot;,&quot;hobby&quot;,&quot;dance&quot;);</code></li><li><strong>列表长度:</strong> <code>jedis.llen(&quot;list&quot;)</code></li><li><strong>列表list下标为2的元素:</strong> <code>jedis.lindex(&quot;list&quot;,2);</code></li><li><strong>移除一个元素:</strong> <code>jedis.lrem(&quot;list&quot;,1,&quot;age&quot;)</code></li><li><strong>将列表key下标为index的元素值设置为value:</strong> <code>jedis.lset(&quot;list&quot;,5,&quot;hello world&quot;);</code></li><li><strong>移除并返回list尾元素:</strong> <code>jedis.rpop(&quot;list&quot;);</code></li><li>取值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = jedis.lrange(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(String str:list)&#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>简单的消息队列</li><li>利用lrange命令，做基于redis的分页功能</li></ul><hr><h4 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h4><ul><li>Redis底层存储是”快速链表(quickList)”结构<ul><li>在<font color=#FF2941>列表元素较少</font>的情况下,会使用一块连续的内存存储,这个结构是ziplist(压缩列表)。</li><li><font color=#FF2941>数据量多</font>时改为quicklist。</li><li>Redis将链表和ziplist结合起来组成了quicklist,将多个ziplist使用双向指针串起来使用</li><li>使用List作为异步消息队列<ul><li><strong>问题1:</strong> 队列空了怎么办?<br><br>&emsp;&emsp;&emsp;&nbsp;<br>当队列为空时,客户端就会陷入空轮询的pop-&gt;无数据-&gt;pop的死循环中。<br>所以采用堵塞读方法  <code>blpop</code>和<code>brpop</code><br>堵塞读在队列没有数据时,会立即进入休眠状态,一旦数据到来,则立刻醒过来。消息延迟几乎为0</li><li><strong>问题2:</strong> 空闲链接自动断开<br><br>&emsp;&emsp;&emsp;&nbsp;<br>如果线程一直堵塞在那里,Redis的客户端就成了闲置连接,闲置过久,服务器一般会主动断开,减少闲置资源占用。<br>这时blpop/brpop会抛出异常。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis基本类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本类型-字符类型</title>
      <link href="/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/05/02/Redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-操作字符类型"><a href="#Java-操作字符类型" class="headerlink" title="Java 操作字符类型"></a>Java 操作字符类型</h2><ul><li><strong>查看键为mykey的值是否存在:</strong> <code>jedis.exists(&quot;mykey&quot;);</code></li><li><strong>键mykey的值为:</strong> <code>jedis.get(&quot;mykey&quot;);</code></li><li><strong>查看键为mykey的类型:</strong> <code>jedis.type(&quot;mykey&quot;);</code></li><li><strong>随机获得一个key:</strong> <code>jedis.randomKey(&quot;mykey&quot;);</code></li><li><strong>将mykey重命名为mykey1:</strong> <code>jedis.rename(&quot;mykey&quot;,&quot;mykey1&quot;);</code></li><li><strong>删除key “mykey”:</strong> <code>jedis.del(&quot;mykey&quot;);</code></li></ul><hr><ul><li><strong>设置name:</strong> <code>jedis.set(&quot;name&quot;,&quot;asd&quot;);</code></li><li><strong>设置name,如果存在返回0:</strong> <code>jedis.setnx(&quot;name&quot;,&quot;asd&quot;);</code></li><li><strong>获取key为name的值:</strong> <code>jedis.get(&quot;name&quot;)</code> </li><li><strong>获取key为name和name1的value值:</strong> <code>jedis.mget(&quot;name&quot;,&quot;name1&quot;);</code></li><li><strong>自增1:</strong> <code>jedis.incr(&quot;index&quot;)</code> </li><li><strong>自增2:</strong> <code>jedis.inceBy(&quot;index&quot;)</code> </li><li><strong>递减1:</strong> <code>jedis.decr(&quot;index&quot;)</code></li><li><strong>递减2:</strong> <code>jedis.decrBy(&quot;index&quot;)</code></li><li><strong>在name后添加String:</strong> <code>jedis.append(&quot;name&quot;,&quot;asd&quot;)</code></li></ul><hr><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>复杂的计数功能的缓存</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis基本类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-适配器模式</title>
      <link href="/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><blockquote><p>将某个类的接口转换成客户端期望的另一个接口表示。使得原本由于接口不兼容而不能一起工作的那些类能在一起工作。</p></blockquote><h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类适配器 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        充电器 phone = <span class="keyword">new</span> 手机();</span><br><span class="line">        System.out.println(phone.高压转低压());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 高压电</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 插座()&#123;</span><br><span class="line">        <span class="keyword">int</span> output = <span class="number">220</span>;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> 充电器</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> 高压转低压();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 手机 <span class="keyword">extends</span> 高压电 <span class="keyword">implements</span> 充电器</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 高压转低压() &#123;</span><br><span class="line">        <span class="keyword">int</span> 高压电 = 插座();</span><br><span class="line">        <span class="comment">//适配细节</span></span><br><span class="line">        <span class="keyword">int</span> 低压电 = 高压电/<span class="number">44</span>;</span><br><span class="line">        <span class="keyword">return</span> 低压电;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类适配器 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        充电器 phone = <span class="keyword">new</span> 手机();</span><br><span class="line">        System.out.println(phone.高压转低压());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 高压电 <span class="keyword">implements</span> 充电器</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 插座()&#123;</span><br><span class="line">        <span class="keyword">int</span> output = <span class="number">220</span>;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> 充电器</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> 高压转低压();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 手机 <span class="keyword">extends</span> 高压电</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 高压转低压() &#123;</span><br><span class="line">        <span class="keyword">int</span> 高压电 = 插座();</span><br><span class="line">        <span class="comment">//适配细节</span></span><br><span class="line">        <span class="keyword">int</span> 低压电 = 高压电/<span class="number">44</span>;</span><br><span class="line">        <span class="keyword">return</span> 低压电;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><blockquote><p>对象适配器拥有源角色的实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 对象适配器 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        充电器 phone = <span class="keyword">new</span> 手机对象(<span class="keyword">new</span> 高压电());</span><br><span class="line">        System.out.println(phone.高压转低压());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 手机对象 <span class="keyword">extends</span> 高压电 <span class="keyword">implements</span> 充电器</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> 高压电 伏<span class="number">220</span>高压电;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 手机对象(高压电 伏<span class="number">220</span>高压电) &#123;</span><br><span class="line">        <span class="keyword">this</span>.伏<span class="number">220</span>高压电 = 伏<span class="number">220</span>高压电;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 高压转低压() &#123;</span><br><span class="line">        <span class="keyword">int</span> 高压电 = 伏<span class="number">220</span>高压电.插座();</span><br><span class="line">        <span class="comment">//适配细节</span></span><br><span class="line">        <span class="keyword">int</span> 低压电 = 高压电/<span class="number">44</span>;</span><br><span class="line">        <span class="keyword">return</span> 低压电;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h3><blockquote><p>通过抽象类来实现适配</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 接口适配器 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        手机输入 phone = <span class="keyword">new</span> 手机适配器(<span class="keyword">new</span> 工业插座());</span><br><span class="line">        System.out.println(<span class="string">"输出后电压"</span>+phone.输入电压());</span><br><span class="line">        phone = <span class="keyword">new</span> 手机适配器(<span class="keyword">new</span> 家庭插座());</span><br><span class="line">        System.out.println(<span class="string">"输出后电压"</span>+phone.输入电压());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 插座</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 输出电压()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 家庭插座 <span class="keyword">extends</span> 插座</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 输出电压() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 工业插座 <span class="keyword">extends</span> 插座</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 输出电压() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">440</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> 手机输入</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> 输入电压();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 手机适配器 <span class="keyword">implements</span> 手机输入</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> 插座 chazuo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 手机适配器(家庭插座 jiatingchazuo) &#123;</span><br><span class="line">        <span class="keyword">this</span>.chazuo = jiatingchazuo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 手机适配器(工业插座 gongyechazuo) &#123;</span><br><span class="line">        <span class="keyword">this</span>.chazuo = gongyechazuo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 输入电压() &#123;</span><br><span class="line">        <span class="keyword">if</span> (chazuo !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输出前电压:"</span>+chazuo.输出电压());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//适配逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用场景<ul><li>项目接口的新需求，不用更改老代码，实现代码兼容</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-观察者模式</title>
      <link href="/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/27</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 观察者模式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        运营商 电信运营商 = <span class="keyword">new</span> 电信运营商();</span><br><span class="line">        电信运营商.增加用户(<span class="keyword">new</span> 苹果手机用户(<span class="number">138</span>));</span><br><span class="line">        电信运营商.增加用户(<span class="keyword">new</span> 苹果手机用户(<span class="number">136</span>));</span><br><span class="line">        电信运营商.增加用户(<span class="keyword">new</span> 安卓手机用户(<span class="number">158</span>));</span><br><span class="line">        电信运营商.发送短信(<span class="string">"开会"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> 电信用户</span>&#123; <span class="comment">//Observe</span></span><br><span class="line">    <span class="keyword">void</span> 接受短信(String message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 苹果手机用户 <span class="keyword">implements</span> 电信用户</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 苹果手机用户(<span class="keyword">int</span> phone) &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 接受短信(String message) &#123;</span><br><span class="line">        System.out.println(<span class="string">"iPhone:"</span>+phone+<span class="string">";电信短信:"</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 安卓手机用户 <span class="keyword">implements</span> 电信用户</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 安卓手机用户(<span class="keyword">int</span> phone) &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 接受短信(String message) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Android:"</span>+phone+<span class="string">";移动短信:"</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> 运营商</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> 增加用户(电信用户 user);</span><br><span class="line">    <span class="keyword">void</span> 发送短信(String message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 电信运营商 <span class="keyword">implements</span> 运营商</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;电信用户&gt; 用户们 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 增加用户(电信用户 user) &#123;</span><br><span class="line">        用户们.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 发送短信(String message) &#123;</span><br><span class="line">        用户们.forEach(电信用户 -&gt; &#123;</span><br><span class="line">            电信用户.接受短信(message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与策略模式一样，如果接口仅有一个方法，可以不需要实现具体观察者对象，如苹果手机用户、安卓手机用户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/27</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 观察者模式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        运营商 电信运营商 = <span class="keyword">new</span> 电信运营商();</span><br><span class="line">        电信运营商.增加用户((String message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"安卓电信短信:"</span>+message);</span><br><span class="line">        &#125;);</span><br><span class="line">        电信运营商.增加用户((String message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"苹果电信短信:"</span>+message);</span><br><span class="line">        &#125;);</span><br><span class="line">        电信运营商.发送短信(<span class="string">"开会"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> 电信用户</span>&#123; <span class="comment">//Observe</span></span><br><span class="line">    <span class="keyword">void</span> 接受短信(String message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> 运营商</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> 增加用户(电信用户 user);</span><br><span class="line">    <span class="keyword">void</span> 发送短信(String message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 电信运营商 <span class="keyword">implements</span> 运营商</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;电信用户&gt; 用户们 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 增加用户(电信用户 user) &#123;</span><br><span class="line">        用户们.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 发送短信(String message) &#123;</span><br><span class="line">        用户们.forEach(电信用户 -&gt; &#123;</span><br><span class="line">            电信用户.接受短信(message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-装饰器模式</title>
      <link href="/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/27</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 装饰器模式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        手机父类 iPhone = <span class="keyword">new</span> 苹果手机();</span><br><span class="line">        手机装饰 加个壳 = <span class="keyword">new</span> 手机壳(iPhone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 手机父类</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String description;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 外观()&#123;</span><br><span class="line">        System.out.println(description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 安卓手机 <span class="keyword">extends</span> 手机父类</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> 安卓手机() &#123;</span><br><span class="line">        description = <span class="string">"安卓手机"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 苹果手机 <span class="keyword">extends</span> 手机父类</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> 苹果手机() &#123;</span><br><span class="line">        description = <span class="string">"苹果手机"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 手机装饰 <span class="keyword">extends</span> 手机父类</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> 手机父类 phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 手机装饰(手机父类 phone) &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> 输出外观()&#123;</span><br><span class="line">        <span class="keyword">if</span> (phone!=<span class="keyword">null</span>)</span><br><span class="line">            phone.外观();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 手机壳 <span class="keyword">extends</span> 手机装饰</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 手机壳(手机父类 phone) &#123;</span><br><span class="line">        <span class="keyword">super</span>(phone);</span><br><span class="line">        <span class="keyword">this</span>.输出外观();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> 输出外观() &#123;</span><br><span class="line">        <span class="keyword">super</span>.输出外观();</span><br><span class="line">        System.out.println(<span class="string">"增加手机壳"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如新增功能 ,代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/27</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 装饰器模式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        手机父类 iPhone = <span class="keyword">new</span> 苹果手机();</span><br><span class="line">        手机装饰 加个壳 = <span class="keyword">new</span> 手机壳(iPhone);</span><br><span class="line">        手机装饰 贴个膜 = <span class="keyword">new</span> 贴膜(iPhone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 手机父类</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String description;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 外观()&#123;</span><br><span class="line">        System.out.println(description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 安卓手机 <span class="keyword">extends</span> 手机父类</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> 安卓手机() &#123;</span><br><span class="line">        description = <span class="string">"安卓手机"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 苹果手机 <span class="keyword">extends</span> 手机父类</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> 苹果手机() &#123;</span><br><span class="line">        description = <span class="string">"苹果手机"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 手机装饰 <span class="keyword">extends</span> 手机父类</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> 手机父类 phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 手机装饰(手机父类 phone) &#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> 输出外观()&#123;</span><br><span class="line">        <span class="keyword">if</span> (phone!=<span class="keyword">null</span>)</span><br><span class="line">            phone.外观();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 手机壳 <span class="keyword">extends</span> 手机装饰</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 手机壳(手机父类 phone) &#123;</span><br><span class="line">        <span class="keyword">super</span>(phone);</span><br><span class="line">        <span class="keyword">this</span>.输出外观();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> 输出外观() &#123;</span><br><span class="line">        <span class="keyword">super</span>.输出外观();</span><br><span class="line">        System.out.println(<span class="string">"增加手机壳"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 贴膜 <span class="keyword">extends</span> 手机装饰</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 贴膜(手机父类 phone) &#123;</span><br><span class="line">        <span class="keyword">super</span>(phone);</span><br><span class="line">        <span class="keyword">this</span>.输出外观();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> 输出外观() &#123;</span><br><span class="line">        <span class="keyword">super</span>.输出外观();</span><br><span class="line">        System.out.println(<span class="string">"贴膜"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用目的<ul><li>动态给对象添加额外职责</li></ul></li><li>应用场景<ul><li>FileInputStream/FileOutputStream</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 装饰器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-策略模式</title>
      <link href="/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 策略模式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> 微信支付());</span><br><span class="line">        context.收钱();</span><br><span class="line">        context.付钱();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> 支付</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> 付钱();</span><br><span class="line">    <span class="keyword">void</span> 收钱();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 微信支付 <span class="keyword">implements</span> 支付</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 付钱() &#123;</span><br><span class="line">        System.out.println(<span class="string">"微信付钱"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 收钱() &#123;</span><br><span class="line">        System.out.println(<span class="string">"微信收钱"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 支付宝支付 <span class="keyword">implements</span> 支付</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 付钱() &#123;</span><br><span class="line">        System.out.println(<span class="string">"支付宝付钱"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 收钱() &#123;</span><br><span class="line">        System.out.println(<span class="string">"支付宝收钱"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> 支付 pay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(支付 payWay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pay = payWay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 付钱() &#123;</span><br><span class="line">        pay.付钱();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 收钱() &#123;</span><br><span class="line">        pay.收钱();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点<ul><li>上下文和具体策略是松耦合关系。</li><li>策略模式满足”开闭原则”，当新增具体策略时不需修改上下文代码。</li></ul></li><li>场景<ul><li>如果程序不希望暴露内部细节，可以使用策略模式封装</li></ul></li><li>应用<ul><li><code>Arrays.sort(Object[],Comparator)</code>和<code>Collections.sort(List,Comparator)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 策略模式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] integers = &#123;</span><br><span class="line">                <span class="keyword">new</span> Integer(<span class="number">1</span>),</span><br><span class="line">                <span class="keyword">new</span> Integer(<span class="number">3</span>),</span><br><span class="line">                <span class="keyword">new</span> Integer(<span class="number">5</span>)</span><br><span class="line">        &#125; ;</span><br><span class="line">        Arrays.sort(integers,<span class="keyword">new</span> Comparator()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ((Integer) o2).intValue()-((Integer) o1).intValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(integers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Lambda表达式简化策略模式"><a href="#使用Lambda表达式简化策略模式" class="headerlink" title="使用Lambda表达式简化策略模式"></a>使用Lambda表达式简化策略模式</h3><blockquote><p>前提：函数接口(@FunctionalInterface)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 策略模式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context((<span class="keyword">int</span> money)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"微信付钱"</span>+money);</span><br><span class="line">        &#125;);</span><br><span class="line">        context.付钱(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> 支付</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> 付钱(<span class="keyword">int</span> money);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> 支付 pay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(支付 payWay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pay = payWay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 付钱(<span class="keyword">int</span> money) &#123;</span><br><span class="line">        pay.付钱(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-代理模式</title>
      <link href="/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><ul><li>目标类和代理类实现同一接口</li><li>对功能进行增强</li><li>缺点: 因为目标类和代理类实现了同一接口，此时接口一旦发生改变，两个类都必须同时实现新增的功能（动态代理可以解决这一缺点）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 静态代理 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        数学老师 mathTeacher1 = <span class="keyword">new</span> 数学老师();</span><br><span class="line">        数学教授 mathTeacher2 = <span class="keyword">new</span> 数学教授(mathTeacher1);</span><br><span class="line">        mathTeacher2.教书();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> 老师</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> 教书();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 数学老师 <span class="keyword">implements</span> 老师</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 教书() &#123;</span><br><span class="line">        System.out.println(<span class="string">"教数学"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 数学教授 <span class="keyword">implements</span> 老师</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> 数学老师 math;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 数学教授(数学老师 math) &#123;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 教书() &#123;</span><br><span class="line">        System.out.println(<span class="string">"教物理"</span>);</span><br><span class="line">        math.教书();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 动态代理 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DynamicProxy dynamicProxy = <span class="keyword">new</span> DynamicProxy(<span class="keyword">new</span> 董事长(),<span class="keyword">new</span> 助理());</span><br><span class="line">        职工 worker = (职工)dynamicProxy.newInstance();</span><br><span class="line">        worker.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> 职工</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 董事长 <span class="keyword">implements</span> 职工</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"做董事长该干的事"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 助理 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeWork</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"work前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterWork</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"work后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line">    <span class="keyword">private</span> 助理 helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object object, 助理 helper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">        <span class="keyword">this</span>.helper = helper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt; clas = <span class="keyword">this</span>.object.getClass();</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(clas.getClassLoader(), clas.getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                helper.beforeWork();</span><br><span class="line">                Object obj = method.invoke(object,args);</span><br><span class="line">                helper.afterWork();</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h3><ul><li>Spring中AOP的实现原理就是用的代理模式–&gt;动态代理+Cglib代理<ul><li>如果目标类实现了接口，Spring底层AOP就调用动态代理，否则调用Cglib代理</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cglib</span>代理 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CrudDaoInterceptor interceptor = <span class="keyword">new</span> CrudDaoInterceptor(<span class="keyword">new</span> CrudDaoImpl(),<span class="keyword">new</span> Transaction());</span><br><span class="line">        CrudDaoImpl proxy = (CrudDaoImpl) interceptor.getObject();</span><br><span class="line">        proxy.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrudDaoImpl</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"select * from table"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"insert into table values()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"delete from table where id = ?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"update table set id = ? where name = ?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开启事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提交事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrudDaoInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line">    <span class="keyword">private</span> Transaction transaction; <span class="comment">//切面</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CrudDaoInterceptor</span><span class="params">(Object object, Transaction transaction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">        <span class="keyword">this</span>.transaction = transaction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">this</span>.object.getClass();</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line">        enhancer.setInterfaces(clazz.getInterfaces());</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        System.out.println(<span class="string">"执行的方法名为:"</span>+methodName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"delete"</span>.equals(methodName))&#123;</span><br><span class="line">            transaction.openTransaction();</span><br><span class="line">            method.invoke(object,objects);</span><br><span class="line">            transaction.commitTransaction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-享元模式</title>
      <link href="/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><blockquote><p>用于减少创建对象的数量 如String</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 享元模式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        字符串 string1 = 对象工厂.getChars(<span class="string">"a"</span>);</span><br><span class="line">        string1.print();</span><br><span class="line">        字符串 string2 = 对象工厂.getChars(<span class="string">"a"</span>);</span><br><span class="line">        string2.print();</span><br><span class="line">        字符串 string3 = 对象工厂.getChars(<span class="string">"b"</span>);</span><br><span class="line">        string3.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> 对象</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 字符串 <span class="keyword">implements</span> 对象</span>&#123;</span><br><span class="line">    String chars;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> 字符串(String chars) &#123;</span><br><span class="line">        <span class="keyword">this</span>.chars = chars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChars</span><span class="params">(String chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chars = chars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(chars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 对象工厂</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String,字符串&gt; 字符串对象池 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> 字符串 getChars(String chars)&#123;</span><br><span class="line">        字符串 字符串对象 = 字符串对象池.get(chars);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (字符串对象 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            字符串对象 = <span class="keyword">new</span> 字符串(chars);</span><br><span class="line">            字符串对象池.put(chars,字符串对象);</span><br><span class="line">            System.out.println(<span class="string">"向字符串对象池插入一个对象:"</span>+字符串对象.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> 字符串对象;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用场景<ul><li>系统中有大量相似对象</li><li>缓冲池场景</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 享元模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-建造者模式</title>
      <link href="/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="生成者模式-Build"><a href="#生成者模式-Build" class="headerlink" title="生成者模式 Build"></a>生成者模式 Build</h2><blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@USER</span>: lynn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/4/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Build</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car audi = <span class="keyword">new</span> Car.Builder()</span><br><span class="line">                .color(Color.BLACK)</span><br><span class="line">                .money(<span class="number">300000</span>)</span><br><span class="line">                .kind(<span class="string">"A4"</span>)</span><br><span class="line">                .year(<span class="number">2020</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(audi.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    String kind;</span><br><span class="line">    Color color;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Car</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        setKind(builder.kind);</span><br><span class="line">        setColor(builder.color);</span><br><span class="line">        setYear(builder.year);</span><br><span class="line">        setMoney(builder.money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKind</span><span class="params">(String kind)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.kind = kind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String kind;</span><br><span class="line">        <span class="keyword">private</span> Color color;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">kind</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">            kind = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">color</span><span class="params">(Color val)</span> </span>&#123;</span><br><span class="line">            color = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">year</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            year = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">money</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            money = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Car <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Car(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>应用场景 <ul><li>Android中，对话框的创建</li><li>OkHttp</li></ul></li><li>优点<ul><li>避免过多setter方法，并且隐藏内部细节</li><li>链式调用，简洁易懂。</li></ul></li><li>缺点<ul><li>内部类与外部类相互引用，可能会导致内存消耗比较大</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 建造者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂模式</title>
      <link href="/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><blockquote><p>创建多个子类工厂</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">createCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AudiCar();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryUser</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        CarFactory audiFactory = <span class="keyword">new</span> AudiFactory();</span><br><span class="line">        Car audi = audiFactory.createCar();</span><br><span class="line">        System.out.println(audi.drive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单-静态工厂模式"><a href="#简单-静态工厂模式" class="headerlink" title="简单/静态工厂模式"></a>简单/静态工厂模式</h3><blockquote><p>缺点：如果需要其他对象就要改代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">createCar</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"Audi"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Car audiCar = CarFactory.createCar(<span class="string">"Audi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><blockquote><p>线程安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//直接创建对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//    声明变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//    提供对外方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
